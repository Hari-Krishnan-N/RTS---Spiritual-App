name: Notification System CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    paths:
      - 'lib/services/improved_notification_service.dart'
      - 'lib/services/notification_migration_service.dart'
      - 'lib/services/notification_scheduler.dart'
      - 'lib/providers/improved_notification_provider.dart'
      - 'lib/screens/improved_notification_screen.dart'
      - 'lib/screens/notification_admin_panel.dart'
      - 'lib/widgets/notification_*.dart'
      - 'lib/utils/notification_utils.dart'
      - 'lib/helpers/notification_integration_helper.dart'
      - 'firestore.rules'
      - 'firestore.indexes.json'
      - 'test/notification_system_test.dart'
      - '.github/workflows/notification_pipeline.yml'
  
  pull_request:
    branches: [ main ]
    paths:
      - 'lib/services/improved_notification_service.dart'
      - 'lib/services/notification_migration_service.dart'
      - 'lib/providers/improved_notification_provider.dart'
      - 'firestore.rules'
      - 'firestore.indexes.json'

env:
  FLUTTER_VERSION: '3.16.0'
  FIREBASE_CLI_VERSION: '12.9.1'

jobs:
  # Code Quality and Testing
  quality_check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run code analysis
      run: flutter analyze lib/services/improved_notification_service.dart lib/providers/improved_notification_provider.dart
      
    - name: Check code formatting
      run: dart format --set-exit-if-changed lib/services/ lib/providers/ lib/widgets/ lib/screens/
      
    - name: Run notification system tests
      run: flutter test test/notification_system_test.dart --coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        
    - name: Run integration tests
      run: flutter test integration_test/notification_flow_test.dart

  # Build for Different Environments
  build_production:
    name: Build Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [quality_check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build APK for production
      run: |
        flutter build apk \
          --dart-define=ENVIRONMENT=production \
          --dart-define=ENABLE_DEBUG_LOGGING=false \
          --dart-define=MAX_NOTIFICATIONS_PER_USER=10 \
          --dart-define=NOTIFICATION_POLLING_INTERVAL_SECONDS=30

  # Firebase Deployment
  deploy_firebase_production:
    name: Deploy Firebase (Production)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build_production]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools@${{ env.FIREBASE_CLI_VERSION }}
      
    - name: Deploy Firestore rules and indexes
      run: |
        echo "Deploying notification system to production..."
        echo "This would deploy firestore rules and indexes"
